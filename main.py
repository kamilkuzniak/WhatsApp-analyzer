from person import Person
import datetime
import pandas as pd
import time
from datetime import datetime
from time import mktime


def chat_fix(messages, timestamps):
    # Fixing the messages list from errors resulting from the multiline messages in the original file and creating a dates list
    for i in range(len(messages)):
        try:
            timestamps.append(time.strptime(messages[i].split('-')[0].split(',')[0] + messages[i].split('-')[0].split(',')[1], '%m/%d/%y %H:%M '))
        except:
            num = 1
            while True:
                if messages[i - num] != 'NaN':
                    messages[i - num] += (' ' + messages[i])
                    messages[i] = 'NaN'
                    break
                else:
                    num += 1


def remove_nan(messages):
    while True:
        try:
            messages.remove('NaN')
        except ValueError:
            break


def gettime(time):
    time_split = time.split(':')

    hour = int(time_split[0])
    minute = int(time_split[1])

    return datetime.time(hour, minute)


def getdate(date):
    date_split = date.split('/')

    year = int('20' + date_split[2])
    month = int(date_split[1])
    day = int(date_split[0])

    return datetime.date(year, month, day).ctime()


# Reading from the file generated by WhatsApp
with open('WhatsApp Chat with Sara.txt', 'r') as chat:
    messages = chat.readlines()

people = []
names = []
timestamps = []
content = []
dates = []
hours = []

chat_fix(messages, timestamps)

remove_nan(messages)

for message in messages:
    try:
        content.append(message.split('-')[1].split(':')[1].replace(' ', '', 1))
        names.append(message.split('-')[1].split(':')[0].replace(' ', '', 1))
    except:
        content.append(message.split('-')[1].replace(' ', '', 1))
        names.append('-')

for timestamp in timestamps:
    dates.append(datetime.fromtimestamp(mktime(timestamps[0])).strftime('%d/%m/%Y'))
    hours.append(datetime.fromtimestamp(mktime(timestamps[0])).strftime('%H:%M'))

chat_data = pd.DataFrame({'Date': dates, 'Hour': hours, 'Content': content, 'Person': names})
#df = pd.DataFrame(list(zip(date, time, name, content)), columns = ['Date', 'Time', 'Name', 'Content'])

print(chat_data)

# This loop creates a person object for each person participating in the chat
# for name in names:
#    people.append(Person(name))
'''
for person in people:
    for line in messages:
        if person.name in line:
            person.msg_count += 1
            person.word_count += len(line.split(':')[-1].split())
    person.calculate_average()
    print(person)

# print('Kamil sent ' + str(round((1 - kamil_msg/sara_msg)*100)) + '% less messages than Sara')
# print('Kamil sent ' + str(round((1 - kamil_words / sara_words) * 100)) + '% less words than Sara')

# if __name__ == '__main__':
'''